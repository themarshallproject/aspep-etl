import pytest
import requests
from dagster import materialize, build_op_context
from unittest.mock import patch, Mock


@pytest.mark.network
def test_get_census_url():
    """
    Test if pages generated by _get_census_url exist for years 2000-2023.
    """
    from process_aspep.assets import _get_census_url

    # Create a mock context with a simple log.info implementation
    mock_context = Mock()
    mock_context.log.info = print  # Replace this with more sophisticated logging if needed

    missing_pages = []
    for year in range(2000, 2024):
        url = _get_census_url(year, mock_context)
        response = requests.head(url)  # Use HEAD to reduce payload
        if response.status_code != 200:
            missing_pages.append((year, url))

    # Assert no pages are missing
    assert not missing_pages, f"Pages missing for years: {missing_pages}"


def test_scrape_data():
    from process_aspep.assets import scrape_data

    # Mock requests.get
    with patch("requests.get") as mock_get:
        # Define mock behavior for the request
        def mock_response(url, *args, **kwargs):
            if url.startswith("https://www.census.gov/programs-surveys"):
                year = url.split("/")[-1].split(".")[0]
            else:
                year = url.split("/")[5]

            year = int(year)
            if year == 2017:
                # Special case: Alternate filename
                mock_html = f"""
                <html>
                    <body>
                        <a href="https://www.census.gov/data{year}/DifferingFilename.xlsx">
                            State and Local Government Employment Data
                        </a>
                    </body>
                </html>
                """
            elif year == 2018:
                # Special case: Alternate link text and filename
                mock_html = f"""
                <html>
                    <body>
                        <a href="/data/{year}/DifferingFilename.xlsx">
                            State and Local Government Employment & Payroll Data
                        </a>
                    </body>
                </html>
                """
            else:
                # Standard case: Regular link text
                mock_html = f"""
                <html>
                    <body>
                        <a href="https://www2.census.gov/data/{year}/State-and-Local-Government-Employment-Data.xls">
                            State and Local Government Employment Data
                        </a>
                    </body>
                </html>
                """
    
            return Mock(status_code=200, text=mock_html)

        mock_get.side_effect = mock_response

        # Execute the asset
        result = materialize([scrape_data])

        # Validate results
        scraped_data = result.output_for_node("scrape_data")

        # Verify the total number of years
        assert len(scraped_data) == 24  # 24 years

        # Validate URLs for each year
        for year in range(2000, 2024):
            if year == 2017:
                assert scraped_data[year] == "https://www.census.gov/data2017/DifferingFilename.xlsx"
            elif year == 2018:
                assert scraped_data[year] == "https://www.census.gov/data/2018/DifferingFilename.xlsx"
            else:
                assert scraped_data[year] == f"https://www2.census.gov/data/{year}/State-and-Local-Government-Employment-Data.xls"


def test_export_to_csv(tmp_path):
    from process_aspep.assets import export_to_csv
    
    # Mock scrape_data output
    mock_scrape_data = {year: f"https://example.com/{year}" for year in range(2000, 2024)}

    # Use `build_op_context` with temporary path
    output_file = tmp_path / "year_url_mapping.csv"
    context = build_op_context(resources={"output_paths": {"csv_output": str(output_file)}})

    # Run the asset
    export_to_csv(context=context, scrape_data=mock_scrape_data)

    # Verify the CSV
    with open(output_file, "r") as file:
        lines = file.readlines()
    assert lines[0].strip() == "Year,URL"
    assert len(lines) == 25